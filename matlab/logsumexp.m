function [y,z]=logsumexp(x, axis, b, return_sign)% LOGSUMEXP accurate log-sum-exp.% % LOGSUMEXP(X,D) returns LOG(SUM(EXP(X),D)) [n,m]=size(x); if(nargin< 2),  if(size(x,1)==1), axis=2; else axis=1; end, end [c,k]=max(x,[],axis); % disp(max(c)) % nonzero so no shortcut in sinkhorn4  w=exp(x-c); if(nargin < 3 || isempty(b))  % Higham: skip 0, and use log1p  if(axis==1)   ii=k+(0:m-1)*n; % ugly matrix -> vector indexing   else   ii=(1:n)+(k-1)'*n;  end  w(ii)=0;  y=c+log1p(sum(w,axis)); else %    if(axis==2)   y=c+log( w*b(:));  else   y=c+log( b(:)'*w);   end end % Python returns a sign -- negative values in log?  z=1.0;  % Higham: derivative is softmax = y./(1+sum(w))end